service cloud.firestore {
  match /databases/{database}/documents {
  	function emailVerified() {
      return request.auth.token.email_verified;
    }
    function getAdminList(){
      return get(/databases/$(database)/documents/platformSettings/adminSettings).data.writeAccess;
    }
    function isAdmin(id){
      return request.auth.uid in getAdminList();
    }
    match /users/{userId} {
      // only users can edit their data
      allow read, update, delete: if isAdmin(request.auth.uid) || request.auth.uid == userId && emailVerified();
      allow create: if request.auth.uid != null;
    }
    match /userResources/{userId} {
      // only users can edit their data
      allow read, update, delete: if isAdmin(request.auth.uid) || request.auth.uid == userId && emailVerified();
      allow create: if request.auth.uid != null;
    }
    match /documents/{documentId} {
      // Anyone can read a public document; only owners can read unpublished documents
      allow read: if isAdmin(request.auth.uid) || resource.data.isPublic == true || request.auth.uid in resource.data.owners;
      // Only document owners can write
      allow update, delete: if isAdmin(request.auth.uid) || request.auth.uid in resource.data.owners;
      allow create: if request.auth.uid in request.resource.data.owners;
    }
    match /dataSources/{documentId} {
      // Anyone can read a public document; only owners can read unpublished documents
      allow read: if true;
      // Only document owners can write
      allow update: if isAdmin(request.auth.uid) || request.auth.uid in resource.data.owners && request.resource.data.isValidated != true;
      allow delete: if isAdmin(request.auth.uid) || request.auth.uid in resource.data.owners;
      allow create: if request.auth.uid in request.resource.data.owners && request.resource.data.isValidated != true;
    }
    match /tokens/{tokenId} {
      // Only admins can edit tokens
      allow create, read, update, delete: if isAdmin(request.auth.uid);
    }
    match /commands/{documentId} {
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if isAdmin(request.auth.uid) || request.auth.uid != null;
    }
  }
}